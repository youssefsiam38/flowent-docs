{
  "openapi": "3.1.0",
  "info": {
    "title": "Flowent API Gateway",
    "description": "The Flowent API Gateway enables external developers to register and manage custom actions that can be used within Flowent's conversational flows. This API provides secure, tenant-specific extensibility for the Flowent platform.\n\n## Authentication\n\n1. Obtain an API token from the Flowent admin panel\n2. Exchange the API token for a JWT token using the `/token/exchange` endpoint\n3. Use the JWT token as a Bearer token in the Authorization header for all requests\n\n## Security\n\nAll webhook calls are secured with HMAC-SHA256 signatures using tenant-specific keys.",
    "version": "1.0.0",
    "contact": {
      "name": "Flowent API Support",
      "url": "https://flowent.chat/support",
      "email": "contact@flowent.chat"
    }
  },
  "servers": [
    {
      "url": "https://api.flowent.chat/api/v1/gateway",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.flowent.chat/api/v1/gateway",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8080/api/v1/gateway",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/token/exchange": {
      "post": {
        "summary": "Exchange API token for JWT token",
        "description": "Exchange your API token for a JWT token that can be used for authenticated requests. JWT tokens are valid for 24 hours.",
        "operationId": "exchangeToken",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["api_token"],
                "properties": {
                  "api_token": {
                    "type": "string",
                    "description": "Your API token from the admin panel",
                    "example": "api_1234567890abcdef1234567890abcdef12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token exchange successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jwt_token": {
                      "type": "string",
                      "description": "JWT token for authentication",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "token_type": {
                      "type": "string",
                      "enum": ["Bearer"],
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "Token expiration time in seconds",
                      "example": 86400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          }
        }
      }
    },
    "/actions": {
      "get": {
        "summary": "List all actions",
        "description": "Retrieve all actions registered for your tenant",
        "operationId": "listActions",
        "tags": ["Actions"],
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Action"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Register a new action",
        "description": "Register a new action with Flowent. The action's webhook URL will be validated with a test request during registration.",
        "operationId": "createAction",
        "tags": ["Actions"],
        "security": [{"BearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "$ref": "#/components/schemas/Action"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "description": "Action name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "action with name 'send_email' already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "Action name",
          "schema": {
            "type": "string",
            "pattern": "^[a-z0-9_]+$",
            "example": "send_email"
          }
        }
      ],
      "get": {
        "summary": "Get a specific action",
        "description": "Retrieve details of a specific action by name",
        "operationId": "getAction",
        "tags": ["Actions"],
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "Action details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "$ref": "#/components/schemas/Action"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update an action",
        "description": "Update an existing action's properties",
        "operationId": "updateAction",
        "tags": ["Actions"],
        "security": [{"BearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "$ref": "#/components/schemas/Action"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an action",
        "description": "Delete an action from your tenant",
        "operationId": "deleteAction",
        "tags": ["Actions"],
        "security": [{"BearerAuth": []}],
        "responses": {
          "200": {
            "description": "Action deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Action deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from token exchange"
      }
    },
    "schemas": {
      "Action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique action identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "description": "Tenant identifier",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-z0-9_]+$",
            "description": "Action name (lowercase, underscores, no spaces)",
            "example": "send_email"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the action",
            "example": "Send an email to a specified recipient"
          },
          "json_schema": {
            "type": "object",
            "description": "JSON Schema defining the action's parameters",
            "example": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "description": "Email address of the recipient"
                },
                "subject": {
                  "type": "string",
                  "description": "Email subject line"
                },
                "body": {
                  "type": "string",
                  "description": "Email body content"
                }
              },
              "required": ["recipient", "subject", "body"]
            }
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "description": "URL where the action will be executed",
            "example": "https://your-server.com/actions/send_email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the action was created",
            "example": "2023-01-01T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the action was last updated",
            "example": "2023-01-01T12:00:00Z"
          }
        }
      },
      "ActionCreateRequest": {
        "type": "object",
        "required": ["name", "description", "webhook_url", "json_schema"],
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z0-9_]+$",
            "minLength": 1,
            "maxLength": 100,
            "description": "Action name (lowercase, underscores, no spaces)",
            "example": "send_email"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "description": "Human-readable description of the action",
            "example": "Send an email to a specified recipient"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "description": "URL where the action will be executed (must be HTTPS in production)",
            "example": "https://your-server.com/actions/send_email"
          },
          "json_schema": {
            "type": "object",
            "description": "JSON Schema defining the action's parameters",
            "example": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "description": "Email address of the recipient"
                },
                "subject": {
                  "type": "string",
                  "description": "Email subject line"
                },
                "body": {
                  "type": "string",
                  "description": "Email body content"
                }
              },
              "required": ["recipient", "subject", "body"]
            }
          }
        }
      },
      "ActionUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "description": "Human-readable description of the action",
            "example": "Updated: Send an email to a specified recipient"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "description": "URL where the action will be executed",
            "example": "https://your-server.com/v2/actions/send_email"
          },
          "json_schema": {
            "type": "object",
            "description": "JSON Schema defining the action's parameters",
            "example": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "string",
                  "description": "Email address of the recipient"
                },
                "subject": {
                  "type": "string",
                  "description": "Email subject line"
                },
                "body": {
                  "type": "string",
                  "description": "Email body content"
                },
                "priority": {
                  "type": "string",
                  "enum": ["low", "normal", "high"],
                  "description": "Email priority level"
                }
              },
              "required": ["recipient", "subject", "body"]
            }
          }
        }
      },
      "WebhookRequest": {
        "type": "object",
        "description": "Request sent to your webhook when an action is executed",
        "properties": {
          "action_name": {
            "type": "string",
            "description": "Name of the action being executed",
            "example": "send_email"
          },
          "parameters": {
            "type": "object",
            "description": "Parameters for the action execution",
            "example": {
              "recipient": "user@example.com",
              "subject": "Welcome!",
              "body": "Welcome to our service!"
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp when the request was sent",
            "example": 1645123456
          },
          "signature": {
            "type": "string",
            "description": "HMAC-SHA256 signature for request validation",
            "example": "a8f4c2e9b1d7c3a5f2e8d6b4c1a9e7f3d5b8a2c6e4f1d9b7a3c5e8f2d6b4a1c9"
          },
          "test": {
            "type": "boolean",
            "description": "True if this is a test/validation request",
            "example": false
          }
        }
      },
      "WebhookResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "string",
            "description": "Description of the action result",
            "example": "Email sent successfully to user@example.com"
          },
          "error": {
            "type": "string",
            "description": "Error message if the action failed (empty string if successful)",
            "example": ""
          }
        }
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid request format"
                },
                "details": {
                  "type": "string",
                  "example": "Field 'name' is required"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid token"
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Action not found"
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Token exchange and authentication operations"
    },
    {
      "name": "Actions",
      "description": "Action registration and management operations"
    }
  ]
}
